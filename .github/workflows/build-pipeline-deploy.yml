name: Build-Pipeline-And-Deploy

on:
  push:
    branches:
      - master

jobs:

  build-mensahub-models:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build MensaHub-Models
        run: |
          cd MensaHub-Models
          mvn clean install

  build-and-deploy-collaborative-filtering-api-adapter:
    runs-on: ubuntu-latest
    needs: build-mensahub-models

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build MensaHub-Collaborative-Filtering-Adapter
        run: |
          cd MensaHub-Collaborative-Filtering-API-Adapter
          mvn clean install

  build-and-publish-mensahub-gateway:
    runs-on: ubuntu-latest
    needs: [build-mensahub-models, build-and-deploy-collaborative-filtering-api-adapter]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build MensaHub-Gateway
        run: 'mvn -s $GITHUB_WORKSPACE/.github/config/maven-settings.xml -Dpackage.publicKey=$PACKAGE_READ clean install -pl MensaHub-Gateway'
        env:
          PACKAGE_READ: ${{ secrets.PACKAGE_READ }}

      - name: Build Docker image for amd64
        run: |
          cd MensaHub-Gateway
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-gateway:amd64 .
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-gateway:amd64
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image for arm64
        run: |
          cd MensaHub-Gateway
          docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-gateway:arm64 -f Dockerfile_arm .
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-gateway:arm64
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

  build-and-publish-mensahub-junction:
    runs-on: ubuntu-latest
    needs: [build-mensahub-models, build-and-deploy-collaborative-filtering-api-adapter]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build MensaHub-Junction
        run: 'mvn -s $GITHUB_WORKSPACE/.github/config/maven-settings.xml -Dpackage.publicKey=$PACKAGE_READ clean install -P production -pl MensaHub-Junction'
        env:
          PACKAGE_READ: ${{ secrets.PACKAGE_READ }}

      - name: Build Docker image for amd64
        run: |
          cd MensaHub-Junction
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-junction:amd64 .
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-junction:amd64
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image for arm64
        run: |
          cd MensaHub-Junction
          docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-junction:arm64 -f Dockerfile_arm .
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-junction:arm64
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

  build-and-publish-mensahub-data-dispatcher:
    runs-on: ubuntu-latest
    needs: [build-mensahub-models, build-and-deploy-collaborative-filtering-api-adapter]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build MensaHub-DataDispatcher
        run: 'mvn -s $GITHUB_WORKSPACE/.github/config/maven-settings.xml -Dpackage.publicKey=$PACKAGE_READ clean install -pl MensaHub-DataDispatcher'
        env:
          PACKAGE_READ: ${{ secrets.PACKAGE_READ }}

      - name: Build Docker image for amd64
        run: |
          cd MensaHub-DataDispatcher
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-datadispatcher:amd64 .
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-datadispatcher:amd64
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image for arm64
        run: |
          cd MensaHub-DataDispatcher
          docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-datadispatcher:arm64 -f Dockerfile_arm .
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mensahub-datadispatcher:arm64
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
